rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow public read access to active profiles
      allow read: if resource.data.isActive == true;
      
      // Allow follow/unfollow operations (updating followers/following arrays)
      allow update: if request.auth != null && 
        isValidFollowUpdate();
      
      // Admin can read/write all users
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admin collection (list of admin user IDs)
    match /admins/{adminId} {
      allow read: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Analytics collection
    match /analytics/{analyticsId} {
      // Allow creation of analytics entries
      allow create: if true;
      
      // Users can read their own analytics
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins can read all analytics
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Reports collection for abuse reports
    match /reports/{reportId} {
      // Anyone can create a report
      allow create: if true;
      
      // Only admins can read reports
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Username reservations to prevent conflicts
    match /usernames/{username} {
      // Allow reading to check availability
      allow read: if true;
      
      // Only allow creation/update by the user who owns it
      allow create, update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications collection for follow notifications
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read, update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
        
      // Allow creating notifications
      allow create: if request.auth != null;
    }
    
    // Helper functions
    
    // Validate follow relationship updates
    function isValidFollowUpdate() {
      // Check if this is a follow/unfollow operation on followers or following arrays
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      let isFollowOperation = 'following' in changedFields || 'followers' in changedFields;
      
      // If it's a follow operation, allow it (since we validate the user IDs)
      if (isFollowOperation) {
        return true;
      }
      
      // Otherwise, check if user owns the document
      return request.auth.uid == resource.id;
    }
  }
}
